(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{260:function(v,_,a){"use strict";a.r(_);var t=a(6),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"_01前端工程化概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_01前端工程化概述"}},[v._v("#")]),v._v(" 01前端工程化概述")]),v._v(" "),a("p",[a("a",{attrs:{href:"02%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AE%A1%E5%88%92%E5%8F%B2"}},[v._v("前端开发的模块化计划史")])]),v._v(" "),a("p",[a("a",{attrs:{href:"03%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E3%80%81%E7%BB%84%E4%BB%B6%E5%8C%96%E3%80%81%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E5%8C%BA%E5%88%AB"}},[v._v("前端模块化、组件化、前端工程化的区别")])]),v._v(" "),a("p",[a("a",{attrs:{href:"04WebPack"}},[v._v("WebPack")])]),v._v(" "),a("p",[a("a",{attrs:{href:"05WebPack%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5"}},[v._v("WebPack原理与实践")])]),v._v(" "),a("p",[a("RouterLink",{attrs:{to:"/12前端工程化/06前端性能优化汇总.html"}},[v._v("前端性能优化汇总.md")])],1),v._v(" "),a("p",[a("a",{attrs:{href:"X.%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98"}},[v._v("前端工程化相关面试题")])]),v._v(" "),a("h2",{attrs:{id:"_1-前端工程化知识要点总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-前端工程化知识要点总结"}},[v._v("#")]),v._v(" 1.前端工程化知识要点总结")]),v._v(" "),a("h3",{attrs:{id:"编程生态的三个阶段："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程生态的三个阶段："}},[v._v("#")]),v._v(" 编程生态的三个阶段：")]),v._v(" "),a("p",[v._v("补全各种api，在语言和基础设施上完善"),a("br"),v._v("\n需更好的组织，出现各种模式"),a("br"),v._v("\n各种分层mvc／mvp／mvvm 、自动化测试、团队协同 （工程化阶段：重视生产效率）")]),v._v(" "),a("p",[v._v("前端是一种GUI软件：本质上所有web应用都是一种运行在网页游览器中的软件，这些软件的图形界面GUI即为前端")]),v._v(" "),a("p",[v._v("软件工程：研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科")]),v._v(" "),a("h3",{attrs:{id:"工程化面对的问题："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工程化面对的问题："}},[v._v("#")]),v._v(" 工程化面对的问题：")]),v._v(" "),a("p",[v._v("开发规范"),a("br"),v._v("\n模块化开发"),a("br"),v._v("\n组件化开发"),a("br"),v._v("\n组件仓库"),a("br"),v._v("\n性能优化"),a("br"),v._v("\n项目部署"),a("br"),v._v("\n开发流程"),a("br"),v._v("\n开发工具")]),v._v(" "),a("p",[v._v("工程化到底要解决哪些问题")]),v._v(" "),a("p",[v._v("合理的开发流程及开发规范，包括代码规范、模块化组件化规范(分治)等（提高生产力）"),a("br"),v._v("\n一套自动化代码质量检测方案（提高系统可靠性）"),a("br"),v._v("\n一套自动化及高度适应性的项目 发布／部署 方案（提高系统的伸缩性及灵活性）"),a("br"),v._v("\n极致的性能优化，包括减少冗余的接口请求及资源请求、提高缓存命中率等，简言之就是站点的打开及运行速度（更好的用户体验）")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/hello_hww/img/raw/master/img1/20200707182559.png",alt:""}})]),v._v(" "),a("p",[v._v("我们需要一系列方案来使我们的项目变得规范、可配置、优化等。")]),v._v(" "),a("h3",{attrs:{id:"我们目前所处的阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们目前所处的阶段"}},[v._v("#")]),v._v(" 我们目前所处的阶段")]),v._v(" "),a("p",[v._v("首先我们需要认识到，前端是一种技术问题相对少、工程化问题相对多的软件开发领域。前端开发虽然相对简单，但是也会遇到不少问题：")]),v._v(" "),a("p",[v._v("1.大体量：多功能、多页面、多状态、多系统\n2.大规模：多人甚至多团队参与开发\n3.高性能：CDN、缓存、请求合并、按需加载、同步/异步加载、首屏渲染")]),v._v(" "),a("h3",{attrs:{id:"技术架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技术架构"}},[v._v("#")]),v._v(" 技术架构")]),v._v(" "),a("p",[v._v("技术架构是指社会中各种技术之间相互作用、相互联系、按一定目的、一定结构方式组成的技术整体。"),a("br"),v._v("\n归根揭底 —— 技术架构（技术体系）就是围绕业务发展、团队规模和团队特点量身打造的，最终目的都是在确保线上的质量和稳定性的前提下，来提升团队整体的开发效率。")]),v._v(" "),a("p",[v._v("说到这里，我们可以梳理下我们团队目前的项目和团队背景这些特点：")]),v._v(" "),a("p",[v._v("项目的特点：大同小异 。基本上都是查询、表单、语音文件上传这么3种页面。目前团队每个项目都是针对前端每个项目重新去做这些东西（比如 ctrl + c，v ）\n团队的特点： 规模小 。虽然目前前端研发成员不多，但是相信公司会做大做强 = =，那么大家就知道规模化会带来沟通成本的提高，我们希望尽可能地降低因此带来的成本提升来实现规模效应")]),v._v(" "),a("h2",{attrs:{id:"_2-如何做-前端工程化-？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何做-前端工程化-？"}},[v._v("#")]),v._v(' 2.如何做"前端工程化"？')]),v._v(" "),a("p",[v._v("前端工程化就是为了让前端开发能够“自成体系”，个人认为主要应该从模块化、组件化、规范化、自动化四个方面思考。")]),v._v(" "),a("h3",{attrs:{id:"模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[v._v("#")]),v._v(" 模块化")]),v._v(" "),a("p",[v._v("简单来说，模块化就是将一个大文件拆分成相互依赖的小文件，再进行统一的拼装和加载。")]),v._v(" "),a("h4",{attrs:{id:"js的模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js的模块化"}},[v._v("#")]),v._v(" JS的模块化")]),v._v(" "),a("p",[v._v("在ES6之前，JavaScript一直没有模块系统，这对开发大型复杂的前端工程造成了巨大的障碍。对此社区制定了一些模块加载方案，如CommonJS、AMD和CMD等。")]),v._v(" "),a("p",[v._v("现在ES6已经在语言层面上规定了模块系统，完全可以取代现有的CommonJS和AMD规范，而且使用起来相当简洁，并且有静态加载的特性。")]),v._v(" "),a("p",[v._v('用++Webpack + Babel++将所有模块打包成一个文件同步加载，也可以搭乘多个chunk异步加载；\n用++System+Babel++主要是分模块异步加载；\n用浏览器的<script type="module">加载。')]),v._v(" "),a("h4",{attrs:{id:"css的模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css的模块化"}},[v._v("#")]),v._v(" css的模块化")]),v._v(" "),a("p",[v._v("虽然SASS、LESS、Stylus等预处理器实现了CSS的文件拆分，但没有解决CSS模块化的一个重要问题：选择器的全局污染问题。")]),v._v(" "),a("p",[v._v("按道理，一个模块化的文件应该要隐藏内部作用域，只暴露少量接口给使用者。而按照目前预处理器的方式，导入一个CSS模块后，已存在的样式有被覆盖的风险。虽然重写样式是CSS的一个优势，但这并不利于多人协作。")]),v._v(" "),a("p",[v._v("为了避免全局选择器的冲突，需要制定CSS命名风格：")]),v._v(" "),a("p",[v._v("BEM风格\nBootstrap风格\n...\n但是这毕竟是弱约束。所以很赞同一句话：")]),v._v(" "),a("blockquote",[a("p",[v._v("与其费尽心思地告诉别人要遵守某种规则，以规避某种痛苦，倒不如从工具层面就消灭这种痛苦。")])]),v._v(" "),a("p",[v._v("从工具层面，社区又创造出Shadow DOM、CSS in JS和CSS Modules三种解决方案。")]),v._v(" "),a("ul",[a("li",[v._v("Shadow DOM是WebComponents的标准。它能解决全局污染问题，但目前很多浏览器不兼容，对我们来说还很久远；")]),v._v(" "),a("li",[v._v("CSS in JS是彻底抛弃CSS，使用JS或JSON来写样式。这种方法很激进，不能利用现有的CSS技术，而且处理伪类等问题比较困难；")]),v._v(" "),a("li",[v._v("CSS Modules仍然使用CSS，只是让JS来管理依赖。它能够最大化地结合CSS生态和JS模块化能力，目前来看是最好的解决方案。Vue的scoped style也算是一种。")])]),v._v(" "),a("h4",{attrs:{id:"资源的模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源的模块化"}},[v._v("#")]),v._v(" 资源的模块化")]),v._v(" "),a("p",[v._v("Webpack的强大之处不仅仅在于它统一了JS的各种模块系统，取代了Browserify、RequireJS、SeaJS的工作。更重要的是它的万能模块加载理念，即所有的资源都可以且也应该模块化。")]),v._v(" "),a("p",[v._v("资源模块化后，优点是：")]),v._v(" "),a("p",[v._v("依赖关系单一化。所有CSS和图片等资源的依赖关系统一走JS路线，无需额外处理CSS预处理器的依赖关系，也不需处理代码迁移时的图片合并、字体图片等路径问题；"),a("br"),v._v("\n资源处理集成化。现在可以用loader对各种资源做各种事情，比如复杂的vue-loader等等；"),a("br"),v._v("\n项目结构清晰化。使用Webpack后，你的项目结构总可以表示成这样的函数： dest = webpack(src, config)。")]),v._v(" "),a("h3",{attrs:{id:"组件化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[v._v("#")]),v._v(" 组件化")]),v._v(" "),a("p",[v._v("从UI拆分下来的每个包含模板(HTML)+样式(CSS)+逻辑(JS)功能完备的结构单元，我们称之为组件。")]),v._v(" "),a("p",[v._v("组件化≠模块化。模块化只是在文件层面上，对代码或资源的拆分；而组件化是在设计层面上，对UI（用户界面）的拆分。")]),v._v(" "),a("p",[v._v("其实，组件化更重要是一种分治思想。")]),v._v(" "),a("p",[v._v("Keep Simple. Everything can be a component.")]),v._v(" "),a("p",[v._v("页面上所有的东西都是组件。页面是个大型组件，可以拆成若干个中型组件，然后中型组件还可以再拆，拆成若干个小型组件，小型组件也可以再拆，直到拆成DOM元素为止。DOM元素可以看成是浏览器自身的组件，作为组件的基本单元。")]),v._v(" "),a("p",[v._v("传统前端框架/类库的思想是先组织DOM，然后把某些可复用的逻辑封装成组件来操作DOM，是DOM优先；而组件化框架/类库的思想是先来构思组件，然后用DOM这种基本单元结合相应逻辑来实现组件，是组件优先。这是两者本质的区别。")]),v._v(" "),a("p",[v._v("其次，组件化实际上是一种按照模板(HTML)+样式(CSS)+逻辑(JS)三位一体的形式对面向对象的进一步抽象。")]),v._v(" "),a("p",[v._v("所以我们除了封装组件本身，还要合理处理组件之间的关系，比如 （逻辑）继承、（样式）扩展、（模板）嵌套和包含等，这些关系都可以归为依赖。")]),v._v(" "),a("p",[v._v("目前市面上的组件化框架很多，主要的有Vue、React、Angular。Vue文档中的对比其他框架一文已经讲得很详细了。")]),v._v(" "),a("h3",{attrs:{id:"规范化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规范化"}},[v._v("#")]),v._v(" 规范化")]),v._v(" "),a("p",[v._v("规范化其实是工程化中很重要的一个部分，项目初期规范制定的好坏会直接影响到后期的开发质量。")]),v._v(" "),a("p",[v._v("比如：")]),v._v(" "),a("h4",{attrs:{id:"目录结构的制定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录结构的制定"}},[v._v("#")]),v._v(" 目录结构的制定")]),v._v(" "),a("p",[v._v("目录结构的合理设定，能为项目带来很多优点：")]),v._v(" "),a("p",[v._v("有助于提高项目的逻辑结构合理性；"),a("br"),v._v("\n对应扩展和合作；"),a("br"),v._v("\n方便资源的统一定位管理。")]),v._v(" "),a("h4",{attrs:{id:"编码规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码规范"}},[v._v("#")]),v._v(" 编码规范")]),v._v(" "),a("p",[v._v("制定一套良好的编码规范可以增强团队开发协作、提高代码质量。\n推荐参考凹凸实验室打造的前端代码规范。")]),v._v(" "),a("p",[v._v("编码规范包括")]),v._v(" "),a("ul",[a("li",[v._v("HTML规范。")])]),v._v(" "),a("p",[v._v("基于 W3C、苹果开发者 等官方文档，并结合团队业务和开发过程中总结的规范约定，让页面HTML代码更具语义性。")]),v._v(" "),a("ul",[a("li",[v._v("CSS规范。")])]),v._v(" "),a("p",[v._v("统一规范团队 CSS 代码书写风格和使用 CSS 预编译语言语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。")]),v._v(" "),a("ul",[a("li",[v._v("JS规范。")])]),v._v(" "),a("p",[v._v("统一规范团队 CSS 代码书写风格和使用 CSS 预编译语言语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。")]),v._v(" "),a("ul",[a("li",[v._v("图片规范。")])]),v._v(" "),a("p",[v._v("了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等，旨在从图片层面优化页面性能。")]),v._v(" "),a("ul",[a("li",[v._v("命名规范。")])]),v._v(" "),a("p",[v._v("从 目录、图片、HTML/CSS文件、ClassName 的命名等层面约定规范团队的命名习惯，增强团队代码的可读性。")]),v._v(" "),a("ul",[a("li",[v._v("前后端接口规范")])]),v._v(" "),a("p",[v._v("“基于 Ajax 带来的 SPA 时代”，这种模式下，前后端的分工非常清晰，前后端的关键协作点是 Ajax 接口，引发一个重要问题：前后端的对接界面双方却关注甚少，没有任何接口约定规范情况下各自撸起袖子就是干，导致我们在产品项目开发过程中，前后端的接口联调对接工作量占比在30%-50%左右，甚至会更高。往往前后端接口联调对接及系统间的联调对接都是整个产品项目研发的软肋。")]),v._v(" "),a("p",[v._v("接口规范主要初衷就是规范约定先行，尽量避免沟通联调产生的不必要的问题，让大家身心愉快地专注于各自擅长的领域。")]),v._v(" "),a("p",[v._v("那么，对于这一SPA阶段，前后端分离有几个重要的关注挑战：")]),v._v(" "),a("p",[v._v("职责分离\n前后端仅仅通过异步接口(AJAX/JSONP)来编程；\n前后端都各自有自己的开发流程，构建工具，测试集合；\n关注点分离，前后端变得相对独立并松耦合。\n后端\t前端\n提供数据\t接收数据，返回数据\n处理业务逻辑\t处理渲染逻辑\n规范原则\n接口返回数据即显示，前端仅做渲染逻辑处理；\n渲染逻辑禁止跨多个接口调用；\n前端关注交互、渲染逻辑，尽量避免业务逻辑处理的出现；\n请求响应传输数据格式：JSON，JSON数据尽量简单轻量，避免多级JSON的出现；\n响应格式\n响应基本格式及处理状态值的规范。\n基本响应格式\n列表响应格式\n特殊内容\n下拉框、复选框、单选框统一由后端逻辑判定选中返回给前端展示；\n关于Boolean类型，JSON数据传输中一律使用1/0来标示，1为是/True，0为否/False\n关于日期类型，JSON数据传输中一律使用字符串，具体日期格式因业务而定；")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("文档规范")])]),v._v(" "),a("li",[a("p",[v._v("组件管理")])]),v._v(" "),a("li",[a("p",[v._v("git分支管理")])]),v._v(" "),a("li",[a("p",[v._v("commit描述规范")])]),v._v(" "),a("li",[a("p",[v._v("视觉图标规范")])]),v._v(" "),a("li",[a("p",[v._v("...")])])]),v._v(" "),a("h3",{attrs:{id:"自动化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动化"}},[v._v("#")]),v._v(" 自动化")]),v._v(" "),a("p",[v._v("前端工程化的很多脏活累活都应该交给自动化工具来完成。需要秉持的一个理念是:")]),v._v(" "),a("p",[v._v("任何简单机械的重复劳动都应该让机器去完成。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("图标合并")])]),v._v(" "),a("li",[a("p",[v._v("持续继承")])]),v._v(" "),a("li",[a("p",[v._v("自动化构建")])]),v._v(" "),a("li",[a("p",[v._v("自动化部署")])]),v._v(" "),a("li",[a("p",[v._v("自动化测试")])])]),v._v(" "),a("comment-comment")],1)}),[],!1,null,null,null);_.default=r.exports}}]);