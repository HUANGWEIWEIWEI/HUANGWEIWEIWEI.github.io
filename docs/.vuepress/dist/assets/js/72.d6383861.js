(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{247:function(n,e,t){"use strict";t.r(e);var o=t(6),s=Object(o.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_1-自定义代码片段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-自定义代码片段"}},[n._v("#")]),n._v(" 1.自定义代码片段")]),n._v(" "),t("p",[n._v("文件 → 首选项 → 用户代码片段")]),n._v(" "),t("p",[n._v("选项解释## ----------\n/"),t("em",[n._v("Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and\ndescription. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n$1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\nsame ids are connected.\nExample:")]),n._v('/\n"Print to console": {\n"prefix": "log",\n"body": [\n"console.log(\'$1\');",\n"$2"\n],\n"description": "Log output to console"\n},\n/*\n如这个例子。\n"Print to console"  将会作为提示内容。\n"prefix"   设置的是提示的前缀。\n"body"   快捷提示的内容。其中 $1 $2 或者类似的 ${1:content}都是光标位置占位符使用tab切换。\n其中${1:content}这个写法可以让提示内容提前填充。\n如果出现多个一样的光标位置占位符就会出现多个一起出现光标（多行编辑）。\n类似的 $1 = ${1} 它们的意思是一样的。\n"description"   直译它的意思就是词义\n*/')])])}),[],!1,null,null,null);e.default=s.exports}}]);