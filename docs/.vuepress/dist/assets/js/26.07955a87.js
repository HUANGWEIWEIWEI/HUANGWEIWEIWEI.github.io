(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{201:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_2-js基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-js基础"}},[s._v("#")]),s._v(" 2.JS基础")]),s._v(" "),a("h2",{attrs:{id:"_2-1-js在网页中的引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-js在网页中的引入"}},[s._v("#")]),s._v(" 2.1 js在网页中的引入")]),s._v(" "),a("p",[s._v("行内式：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<input type="button" onclick="alert(112)">\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("内嵌式：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("写在<script>js代码<\/script>中\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("外链式：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('链接js文件,用外链就不能在 script 标签中填写 js 代码，填了也无效\n<script src="./index.js"><\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("js 文件一般加载在后面，在前面会网页加载影响速度"),a("br"),s._v("\njs 代码由浏览器解析执行")]),s._v(" "),a("h2",{attrs:{id:"_2-2-js的变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-js的变量"}},[s._v("#")]),s._v(" 2.2 JS的变量")]),s._v(" "),a("h3",{attrs:{id:"_2-2-1-创建方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-创建方式"}},[s._v("#")]),s._v(" 2.2.1.创建方式")]),s._v(" "),a("p",[s._v("var ----- ES3 声明一个变量")]),s._v(" "),a("p",[s._v("let ----- ES6 声明一个变量")]),s._v(" "),a("p",[s._v("const ----- ES6 声明一个常量")]),s._v(" "),a("p",[s._v("function ----- 声明一个函数")]),s._v(" "),a("p",[s._v("class ----- 创建一个类")]),s._v(" "),a("p",[s._v("import/require ----- 基于ES6Module或CommonJS规范导入模块")]),s._v(" "),a("h3",{attrs:{id:"_2-2-2-命名规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-命名规范"}},[s._v("#")]),s._v(" 2.2.2.命名规范")]),s._v(" "),a("p",[s._v("1.严格遵循大小写")]),s._v(" "),a("p",[s._v("2.不能使用关键字和保留字")]),s._v(" "),a("p",[s._v("3.驼峰命名法")]),s._v(" "),a("blockquote",[a("p",[s._v("一些常见的有特殊含义的词组"),a("br"),s._v("\nadd/insert/create----创建"),a("br"),s._v("\ndel/delete/remove----删除"),a("br"),s._v("\nupdate---------------修改"),a("br"),s._v("\nselect/query/get-----查询"),a("br"),s._v("\ninfo-----------------信息")])]),s._v(" "),a("p",[s._v("4.命名规则")]),s._v(" "),a("blockquote",[a("p",[s._v("使用 $ _ 英文字母 数字 命名"),a("br"),s._v("\n$开头一般代表使用JQ或者其他使用$的类库获取的内容"),a("br"),s._v("\n_开头一般代表全局或者公共的变量"),a("br"),s._v("\n数字不能出现在变量名的开头，但可以出现在其他地方用以区分相似名称的变量"),a("br"),s._v("\n若想分隔单词，可以使用驼峰或_符号，但不能用中文的-符号，虽不会报错，但强烈不推荐")])]),s._v(" "),a("h2",{attrs:{id:"_2-3-js的数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-js的数据类型"}},[s._v("#")]),s._v(" 2.3 JS的数据类型")]),s._v(" "),a("h3",{attrs:{id:"_2-3-1-基本数据类型（值类型-原始型）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-基本数据类型（值类型-原始型）"}},[s._v("#")]),s._v(" 2.3.1 基本数据类型（值类型/原始型）")]),s._v(" "),a("h4",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[s._v("#")]),s._v(" number")]),s._v(" "),a("h5",{attrs:{id:"包含"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包含"}},[s._v("#")]),s._v(" 包含")]),s._v(" "),a("p",[s._v("整数负数和0\nNaN -----与任何值都不相等包括它本身"),a("br"),s._v("\nInfinity -----无穷大的值")]),s._v(" "),a("h5",{attrs:{id:"isnan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isnan"}},[s._v("#")]),s._v(" isNaN")]),s._v(" "),a("p",[s._v("isNaN() 函数用于检查其参数是否是非数字值"),a("br"),s._v("\n返回值为true或者false")]),s._v(" "),a("h5",{attrs:{id:"其他类型转数字类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他类型转数字类型"}},[s._v("#")]),s._v(" 其他类型转数字类型")]),s._v(" "),a("h6",{attrs:{id:"number-value-js内置的转换方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-value-js内置的转换方法"}},[s._v("#")]),s._v(" Number([value]) -----JS内置的转换方法")]),s._v(" "),a("blockquote",[a("p",[s._v("isNaN在检测的时候，==比较的时候，数学运算的时候；会用到此方法")])]),s._v(" "),a("p",[s._v("1.字符串->数字")]),s._v(" "),a("p",[s._v("都是有效数字字符的字符串--\x3e具体的数字"),a("br"),s._v("\n字符串中存在非有效字符--\x3eNaN"),a("br"),s._v("\n空字符串--\x3e0")]),s._v(" "),a("p",[s._v("2.布尔->数字")]),s._v(" "),a("p",[s._v("true--\x3e1"),a("br"),s._v("\nfalse--\x3e0")]),s._v(" "),a("p",[s._v("3.空->数字")]),s._v(" "),a("p",[s._v("null--\x3e0"),a("br"),s._v("\nundefine--\x3eNaN")]),s._v(" "),a("p",[s._v("4.Symbol->数字")]),s._v(" "),a("p",[s._v("不能，会报错")]),s._v(" "),a("p",[s._v("5.对象->数字")]),s._v(" "),a("p",[s._v('过程:先把obj转化为字符串"[object Object]" 再把字符串转化为Number("[object Object]")')]),s._v(" "),a("p",[s._v("空数组对象--\x3e0"),a("br"),s._v("\n其余对象--\x3eNaN")]),s._v(" "),a("p",[s._v("6.函数--\x3e数字")]),s._v(" "),a("p",[s._v("过程:先把对象转化为字符串，再把字符串转化为数字")]),s._v(" "),a("p",[s._v("都是NaN")]),s._v(" "),a("h6",{attrs:{id:"parseint-value-和parsefloat-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parseint-value-和parsefloat-value"}},[s._v("#")]),s._v(" parseInt([value])和parseFloat([value])")]),s._v(" "),a("p",[s._v("原理：把字符串转化为数字类型（如果处理的值不是字符串，需要先转化为字符串再转化为数字类型）")]),s._v(" "),a("p",[s._v("即只对string有效")]),s._v(" "),a("p",[s._v("定义：从字符串最左边开始找，把找到的有效数字转化为数字，直到遇到一个非有效字符，再结束查找（第一个字符不是数字就直接返回NaN了）")]),s._v(" "),a("p",[s._v("parseFloat比parseInt多识别一位小数点")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//--------------------字符串转数字---------------------------")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"234"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1、纯数字转换")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" \n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1 字符串在运算操作中会被当做数字类型来处理")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("     s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" \n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2 字符前加“+”")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3 string的两个转换函数，只对string有效")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 234")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//234")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//4 强制类型转换")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 234")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2、数字加字母等非数字转换")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'234string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("　"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//234")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//234.0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("blockquote",[a("p",[s._v("toFix(N) 数字.toFix(N) 保留小数点后N位，最后结果是一个string\nMax_SAFE_INTEGER 最大安全数（js能识别的最大安全整数） 9007199254740991 ·注意：ES6又提供了一个新数据类型BigInt")])]),s._v(" "),a("h4",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" string")]),s._v(" "),a("p",[s._v("单、双、反引号包起来的都是字符串")]),s._v(" "),a("h5",{attrs:{id:"其它类型转字符串类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它类型转字符串类型"}},[s._v("#")]),s._v(" 其它类型转字符串类型")]),s._v(" "),a("p",[s._v("方法：String([value]) 和 [value].toString()")]),s._v(" "),a("p",[s._v("隐式转换：字符串拼接时；对象转换为数字时要先转换为字符串")]),s._v(" "),a("p",[s._v('普通对象转字符串 "[object object]"')]),s._v(" "),a("p",[s._v('数组对象转字符串 用逗号分隔数组的每一项 "第一项,第二项,..."')]),s._v(" "),a("h5",{attrs:{id:"字符串的数学运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的数学运算"}},[s._v("#")]),s._v(" 字符串的数学运算")]),s._v(" "),a("p",[s._v("取余 %(膜)")]),s._v(" "),a("p",[s._v("加减乘除的数学运算---如果遇到非数字类型，需要基于Number方法强制转换成数字然后运算")]),s._v(" "),a("p",[a("strong",[s._v("加的字符串拼接")])]),s._v(" "),a("p",[s._v("只要加的任意一边出现字符串，则为字符串拼接")]),s._v(" "),a("p",[s._v("对象转数字需要先转换为字符串，变为字符串后直接拼接，不再转为数字")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21.2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'tencent'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//NaNtencentnull9false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("真实项目中经常把一些变量的值拼接到指定的字符串中")]),s._v(" "),a("p",[s._v("传统的拼接方式\n在字符串中基于\"++\"或'++'的方式把变量拼接到字符串中\nlet result=year+'年'+mounth+'月'+day+'日'+hours+':'+minutes+':'+seconds\n这种方式涉及很多恶心的规则，容易拼错")]),s._v(" "),a("p",[s._v("ES6中的模板字符串\n"),a("code",[s._v("${}")]),s._v(" ---在${}中存放变量或其他JS表达式即可\nlet result="),a("code",[s._v("${year}年${mounth}月${day}日${hours}：${minutes}：${seconds}")]),s._v("\n很简单")]),s._v(" "),a("h4",{attrs:{id:"boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[s._v("#")]),s._v(" boolean")]),s._v(" "),a("p",[s._v("包含true和false")]),s._v(" "),a("h5",{attrs:{id:"其他类型转布尔类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他类型转布尔类型"}},[s._v("#")]),s._v(" 其他类型转布尔类型")]),s._v(" "),a("p",[s._v("方法：Boolean([value]) 和 ![value] 和 !![value]")]),s._v(" "),a("p",[s._v("值：除了 0 '' NaN null undefine 这 五个为false，其余都为true")]),s._v(" "),a("p",[s._v("条件判断时 每一个条件最后一定是true/false if(1==1){...}\n只写一个值，也要把这个值转化为布尔，再校验程序的真假 if(1){...}")]),s._v(" "),a("h4",{attrs:{id:"null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[s._v("#")]),s._v(" null")]),s._v(" "),a("h4",{attrs:{id:"undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[s._v("#")]),s._v(" undefined")]),s._v(" "),a("h4",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[s._v("#")]),s._v(" symbol")]),s._v(" "),a("h3",{attrs:{id:"_2-3-2-引用数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-引用数据类型"}},[s._v("#")]),s._v(" 2.3.2 引用数据类型")]),s._v(" "),a("h4",{attrs:{id:"object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[s._v("#")]),s._v(" object")]),s._v(" "),a("blockquote",[a("p",[s._v("{...} [...] /^$/ data Math\n普通对象，数组对象，正则对象，日期对象，数学函数对象")])]),s._v(" "),a("p",[s._v("特点：\n用键值对来描述一个对象的特征，每一个对象都是综合体，存在零到多组键值对\n{key:value,...}每组键值对都是key:value的格式，多组键值对用逗号分隔\nkey不能是引用数据类型，value可以是任何的数据类型")]),s._v(" "),a("p",[s._v("键值对：\n1.获取\n获取值\n1.对象.属性名 此方法属性名不能是数字\n2.对象[属性名] 此方法属性名要是值而不是变量，它会把变量储存的值当做对象的属性名进行操作\n如果指定的属性不存在，获取到的属性值将是undefined，不会报错！\n获取属性名\nObject.key(对象)----返回当前对象所有属性名的数组\n2.新增|修改\n对象的属性名不允许重复哦\n之前没有则为新增\n之前有则为修改对应的属性值\n3.删除\n假删除 object.name=null 对象的属性还在但属性值为空\n真删除 delete obj.name 对象的属性没了")]),s._v(" "),a("p",[s._v("引用数据类型不能作为属性名,\n对象属性名不是字符串就会调用toString转字符串，如果不能转报错\nObject的toString是[Object object]")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" m"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"张三"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//=>obj[{X:100}] 但是对象不能作为属性名，会自动将其转换为字符串 =>{"[object Object]":"张三"}')]),s._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"李四"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//=>obj[[100,200]]=>{"100，200":"李四"}')]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//{[object Object]: "张三", 100,200: "李四"}')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("数组")]),s._v(" "),a("p",[s._v("数组是特殊的对象\n它的属性名是数字，数字从0开始逐增----这种数字属性名叫做“索引”\n默认有一个length属性存储数组的长度")]),s._v(" "),a("h4",{attrs:{id:"function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[s._v("#")]),s._v(" function")]),s._v(" "),a("h3",{attrs:{id:"_2-3-3-应用拓展-相互转换、堆栈内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-应用拓展-相互转换、堆栈内存"}},[s._v("#")]),s._v(" 2.3.3 应用拓展--相互转换、堆栈内存")]),s._v(" "),a("h4",{attrs:{id:"_1-条件判断里的相互转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-条件判断里的相互转换规则"}},[s._v("#")]),s._v(" 1.条件判断里的相互转换规则")]),s._v(" "),a("p",[s._v("数字==字符串 字符串转数字，再比较")]),s._v(" "),a("p",[s._v("数字==布尔 布尔转数字")]),s._v(" "),a("p",[s._v("字符串==布尔 两者都转数字")]),s._v(" "),a("p",[s._v("对象==数字 对象转数字")]),s._v(" "),a("p",[s._v("对象==字符串 对象转字符串")]),s._v(" "),a("p",[s._v("对象==布尔 两者转数字")]),s._v(" "),a("p",[s._v("对象==对象 主要看空间地址 空间地址相同则true，反之false")]),s._v(" "),a("p",[s._v("规律： 处理字符串和对象比较时，要把对象转为字符串；其余都先转为数字类型再比较")]),s._v(" "),a("p",[s._v("特殊："),a("br"),s._v("\nNaN和其他值永不相等"),a("br"),s._v("\nnull和undefined不等于任何一个数据类型，"),a("br"),s._v("\n但是，"),a("br"),s._v("\nnull==undefined true"),a("br"),s._v("\nnull===undefined false")]),s._v(" "),a("h4",{attrs:{id:"_2-数据类型之间的区别（堆栈内存）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型之间的区别（堆栈内存）"}},[s._v("#")]),s._v(" 2.数据类型之间的区别（堆栈内存）")]),s._v(" "),a("p",[s._v("webkit底层运行机制"),a("br"),s._v("\n底层渲染过程"),a("br"),s._v("\n1.浏览器打开页面，浏览器引擎自上而下渲染执行代码"),a("br"),s._v("\n2.执行代码时会给它一个环境ECStack（Execution Context Stack执行环境栈）=>栈内存stack"),a("br"),s._v("\n3.最开始执行的是全局代码，所以会形成一个EC（GLOBAL）全局上下文，在栈内存中执行全局的代码"),a("br"),s._v("\n4.在全局的执行上下文中有一个VO(GLOBAL)全局变量对象，可以把接下来定义的变量和对应的值储存到这里面"),a("br"),s._v("\n内存的概念"),a("br"),s._v("\nStack 栈内存 内存条 供代码自上而下执行，储存基本类型值"),a("br"),s._v("\nHeap 堆内存 硬盘 储存引用类型值"),a("br"),s._v("\n堆栈内存，就是在计算机内存中分配出来一块空间，用来执行和储存代码")]),s._v(" "),a("p",[s._v("基本数据类型（值类型）"),a("br"),s._v("\n结构简单，直接把创建的值存到“栈内存”中即可"),a("br"),s._v("\n定义一个变量的3个步骤 let a=12;"),a("br"),s._v("\n1.创建一个值，直接存在栈内存中"),a("br"),s._v("\n2.创建一个变量a，存在VO(GLOBAL)中"),a("br"),s._v("\n3.让创建的变量a和创建的值12关联在一起=> =赋值的操作"),a("br"),s._v("\n图例"),a("br"),s._v(" "),a("img",{attrs:{src:"https://gitee.com/hello_hww/img/raw/master/img1/20200627093654.png",alt:""}})]),s._v(" "),a("p",[s._v("引用数据类型"),a("br"),s._v("\n结构复杂，一个综合体，包含很多值"),a("br"),s._v("\n所以要单独开辟空间（堆内存）来储存"),a("br"),s._v("\n定义一个对象的3个步骤 let n={...}"),a("br"),s._v("\n1.创建值"),a("br"),s._v("\n开辟一个堆内存（heap），每个堆都有一个16进制的地址"),a("br"),s._v("\n把对象中的键值对分别储存到堆内存中"),a("br"),s._v("\n把堆内存的地址放在栈内存中，供变量引用"),a("br"),s._v("\n2.创建一个变量"),a("br"),s._v("\n3.让变量和之前创建的堆内存的地址关联"),a("br"),s._v("\n图例"),a("br"),s._v(" "),a("img",{attrs:{src:"https://gitee.com/hello_hww/img/raw/master/img1/20200627095812.png",alt:""}})])])}),[],!1,null,null,null);t.default=e.exports}}]);